class Solution {
    vector<int>direction={0,-1,0,1,0};
    void dfs(vector<vector<int>>& grid,int row,int col){
        grid[row][col]=-1;

        for(int d=0;d<4;d++){
            int nrow = row+direction[d];
            int ncol = col+direction[d+1];

            if(nrow>0 && nrow<grid.size() && ncol>0 && ncol <grid[0].size() && grid[nrow][ncol]==0)
            dfs(grid,nrow,ncol);
        }
    }
public:
    int closedIsland(vector<vector<int>>& grid) {
        int m =grid.size();
        if(m==0)return 0;
        int n= grid[0].size();

        for(int i=0;i<n;i++){
            if(grid[0][i]==0)dfs(grid,0,i);
            if(grid[m-1][i]==0)dfs(grid,m-1,i);
        }

        for(int i=0;i<m;i++){
            if(grid[i][0]==0)dfs(grid,i,0);
            if(grid[i][n-1]==0)dfs(grid,i,n-1);
        }

        int result=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 || grid[i][j]==-1)continue;
                result++;
                dfs(grid,i,j);
            }
        }
        return result;
    }
};