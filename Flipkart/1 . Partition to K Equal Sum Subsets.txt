class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum=0,maxnum=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            maxnum = Math.max(maxnum,nums[i]);
        }

        if(sum%k!=0 || maxnum >sum/k)return false;
        return helper(nums,k,sum/k,0,new boolean[nums.length],0);
    }

    private boolean helper(int[] nums,int k, int targetsum,int currentsum,boolean[] visited,int index){
        if(k==0)return true;
        if(currentsum>targetsum)return false;
        if(currentsum==targetsum)return helper(nums,k-1,targetsum,0,visited,0);

        for(int i=index;i<nums.length;i++){
            if(!visited[i]){
                visited[i]=true;
                if(helper(nums,k,targetsum,currentsum+nums[i],visited,i+1))return true;
                visited[i]=false;
            }
        }
        return false;
    }

}