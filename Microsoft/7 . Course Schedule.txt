class Solution {
private:
    bool cycle(int curr,vector<vector<int>>&adj , vector<int>&vis){
        if(vis[curr]==2)return true;

        vis[curr]=2;
        for(int i=0;i<adj[curr].size();i++){
            if(vis[adj[curr][i]]!=1)if(cycle(adj[curr][i],adj,vis)) return true;
        }

        vis[curr]=1;
        return false;
    }    
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        //make adjacency matrix[directed graph]
        vector<vector<int>>adj(numCourses);
        for(int i=0;i<prerequisites.size();i++)adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        vector<int>visited(numCourses,0);
        for(int i=0;i<numCourses;i++){
            if(visited[i]==0){
                if(cycle(i,adj,visited))return false;
            }
        }
        return true;
    }
};