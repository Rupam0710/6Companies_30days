class Solution {
    private int dir[][]={{-2,-1},{-2,+1},{-1,-2},{-1,+2},{1,-2},{1,2},{2,-1},{2,1}};
    public double knightProbability(int n, int k, int row, int column) {
        HashMap<String,Double>map=new HashMap<>();
        return find(n,k,row,column,map);
    }

    private double find(int n,int k,int r,int c,HashMap<String,Double>map){
        if(isValid(n,r,c)==false)return 0;
        if(k==0)return 1;
        String key = r+"code"+c+"bix"+k;
        if(map.containsKey(key))return map.get(key);
        double probability = 0;
        for(int i=0;i<dir.length;i++){
            probability += find(n,k-1,r+dir[i][0],c+dir[i][1],map)/8.0;
        }
        map.put(key,probability);
        return probability;
    }

    private boolean isValid(int n,int r,int c){
        if(r<0 || r>=n || c<0 || c>=n)return false;
        return true;
    }
}