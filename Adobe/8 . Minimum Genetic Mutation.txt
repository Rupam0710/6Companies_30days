class Solution {
private :
    //calculate teh size differnece between 2 strings
    bool diff(string& a,string& b){
        if(a.size()!=b.size())return false;
        int count =0;
        for(int i=0;i<b.size();i++){
            if(a[i]!=b[i])count++;
        }
        return count==1;
    }    
public:
    int minMutation(string start, string end, vector<string>& bank) {
        int n = bank.size();
        map<string,vector<string>>adj;
        
        //To make the graph of all strings in bank
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(diff(bank[i],bank[j])){
                    adj[bank[i]].push_back(bank[j]);
                    adj[bank[j]].push_back(bank[i]);
                }

            }
        }
        //To mae connections i.e to see from the start position which are nodes we can go to
        for(int i=0;i<n;i++){
            if(diff(bank[i],start)){
                adj[bank[i]].push_back(start);
                adj[start].push_back(bank[i]);
            }
        }

        queue<string>q;
        q.push(start);
        set<string>st;
        st.insert(start);
        int ans =0;

        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                auto node = q.front();
                q.pop();

                for(auto &e : adj[node]){
                    //if the node is not iterated over previously we will iterate over it
                    if(st.count(e)==0){
                        st.insert(e);
                        q.push(e);
                    }
                }
            }

            ans++;
            if(st.count(end))return ans;
        }

        return -1;
    }
};